name: CI

on:
  pull_request:
    paths:
      - 'Dockerfile'
      - '*/src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/ci.yml'
  push:
    branches:
      - 'master'
    tags:
      - v*

env:
  CARGO_INCREMENTAL: 0
  RUST_CACHE_VERSION: v1
  REGISTRY_IMAGE: ghcr.io/eewbot/eew-renderer
  PROJ_NAME: eew-renderer

jobs:
  release_windows:
    permissions:
      contents: write

    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - name: Install Toolchains
        run: |
          winget install --id=Google.Protobuf --exact --accept-package-agreements --accept-source-agreements
          winget install --id=MinIO.Client --exact --accept-package-agreements --accept-source-agreements
          echo $Env:APPDATA\..\Local\Microsoft\WinGet\Links | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Prepare Map
        shell: C:\shells\gitbash.exe {0}
        run: |
          mc alias set yr32srv https://minio-s3.yr32.net eewbot-ci "${{ secrets.YR32SRV_EEWBOT_CI_SECRET }}"
          pushd assets/shapefile/earthquake_detailed
          mc get yr32srv/eewbot/earthquake_detailed.zip ./earthquake_detailed.zip
          7z e ./earthquake_detailed.zip -y
          popd

      - uses: Swatinem/rust-cache@v2.7.8
        with:
          prefix-key: ${{ env.RUST_CACHE_VERSION }}-rust

      - name: Build
        run: |
          cargo build --release

      - name: Install cargo license
        run: |
          cargo install cargo-license

      - name: Create CREDITS file
        shell: C:\shells\gitbash.exe {0}
        run: |
          cargo license \
            --authors \
            --do-not-bundle \
            --avoid-dev-deps \
            --filter-platform "$(rustc -vV | sed -n 's|host: ||p')" \
              > CREDITS

      - name: Make release file
        shell: C:\shells\gitbash.exe {0}
        run: |
          DIR_NAME="${{ env.PROJ_NAME }}-windows-x86_64-${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('master-{0}', github.sha) }}"
          mkdir "$DIR_NAME"
          cp ./target/release/renderer.exe "$DIR_NAME/"
          cp ./LICENSE "$DIR_NAME/"
          cp ./CREDITS "$DIR_NAME/"
          cp ./README.md "$DIR_NAME/"
          7z a "$DIR_NAME.zip" "$DIR_NAME/"

      - name: pre-release
        uses: softprops/action-gh-release@v2.2.2
        if: "! startsWith(github.ref, 'refs/tags/')"
        with:
          tag_name: master-${{ github.sha }}
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            *.zip

      - name: tagged-release
        uses: softprops/action-gh-release@v2.2.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            *.zip

  release_linux:
    if: ${{ github.event_name != 'pull_request' }}
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghimage: ubuntu-24.04
            mcarch: amd64
            arch_s: x86_64

          - ghimage: ubuntu-24.04-arm
            mcarch: arm64
            arch_s: aarch64

    permissions:
      contents: write

    runs-on: ${{ matrix.ghimage }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - run: |
          sudo curl "https://dl.min.io/client/mc/release/linux-${{ matrix.mcarch }}/mc" -o /bin/mc
          sudo chmod +x /bin/mc
          mc alias set yr32srv https://minio-s3.yr32.net eewbot-ci "${{ secrets.YR32SRV_EEWBOT_CI_SECRET }}"
          pushd assets/shapefile/earthquake_detailed
          mc get yr32srv/eewbot/earthquake_detailed.zip ./earthquake_detailed.zip
          unzip -o ./earthquake_detailed.zip
          popd
          sudo apt-get install -y protobuf-compiler

      - name: Install cargo license
        run: |
          cargo install cargo-license

      - uses: Swatinem/rust-cache@v2.7.8
        with:
          prefix-key: ${{ env.RUST_CACHE_VERSION }}-rust

      - name: Build
        run: |
          cargo build --release

      - name: Create CREDITS file
        run: |
          cargo license \
            --authors \
            --do-not-bundle \
            --avoid-dev-deps \
            --filter-platform "$(rustc -vV | sed -n 's|host: ||p')" \
              > CREDITS

      - name: Make release file
        run: |
          DIR_NAME="${{ env.PROJ_NAME }}-linux-${{ matrix.arch_s }}-${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('master-{0}', github.sha) }}"
          mkdir "$DIR_NAME"
          cp ./target/release/renderer "$DIR_NAME/"
          cp ./LICENSE "$DIR_NAME/"
          cp ./CREDITS "$DIR_NAME/"
          cp ./README.md "$DIR_NAME/"
          tar cvf "$DIR_NAME.tar.gz" "$DIR_NAME/"

      - name: pre-release
        uses: softprops/action-gh-release@v2.2.2
        if: "! startsWith(github.ref, 'refs/tags/')"
        with:
          tag_name: master-${{ github.sha }}
          prerelease: true
          fail_on_unmatched_files: true
          files: |
            *.tar.gz

      - name: tagged-release
        uses: softprops/action-gh-release@v2.2.2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            *.tar.gz


  clippy_and_test:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghimage: ubuntu-24.04
            dockerarch: linux/amd64
            mcarch: amd64

          - ghimage: ubuntu-24.04-arm
            dockerarch: linux/arm64
            mcarch: arm64

    permissions:
      packages: write
      checks: write
      contents: read
      deployments: write

    runs-on: ${{ matrix.ghimage }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - run: |
          sudo curl "https://dl.min.io/client/mc/release/linux-${{ matrix.mcarch }}/mc" -o /bin/mc
          sudo chmod +x /bin/mc
          mc alias set yr32srv https://minio-s3.yr32.net eewbot-ci "${{ secrets.YR32SRV_EEWBOT_CI_SECRET }}"
          pushd assets/shapefile/earthquake_detailed
          mc get yr32srv/eewbot/earthquake_detailed.zip ./earthquake_detailed.zip
          unzip -o ./earthquake_detailed.zip
          popd
          sudo apt-get install -y protobuf-compiler

      - name: Get Rust toolchain
        id: toolchain
        run: |
          awk -F'[ ="]+' '$1 == "channel" { print "toolchain=" $2 }' rust-toolchain >> "$GITHUB_OUTPUT"

      - name: install clippy
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ steps.toolchain.outputs.toolchain }}
          components: clippy

      - uses: Swatinem/rust-cache@v2.7.8
        with:
          prefix-key: ${{ env.RUST_CACHE_VERSION }}-rust

      - name: clippy check
        uses: yanorei32/action-clippy@50412b135153ebee7d4b8a5b868c4defdc663683
        with:
          reporter: github-check

      - name: unit test
        run: |
          cargo test --no-run --locked
          cargo test

  docker_build:
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        include:
          - ghimage: ubuntu-24.04
            dockerarch: linux/amd64
            mcarch: amd64

          - ghimage: ubuntu-24.04-arm
            dockerarch: linux/arm64
            mcarch: arm64

    permissions:
      packages: write
      checks: write
      contents: read
      deployments: write

    runs-on: ${{ matrix.ghimage }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          submodules: true

      - run: |
          sudo curl "https://dl.min.io/client/mc/release/linux-${{ matrix.mcarch }}/mc" -o /bin/mc
          sudo chmod +x /bin/mc
          mc alias set yr32srv https://minio-s3.yr32.net eewbot-ci "${{ secrets.YR32SRV_EEWBOT_CI_SECRET }}"
          pushd assets/shapefile/earthquake_detailed
          mc get yr32srv/eewbot/earthquake_detailed.zip ./earthquake_detailed.zip
          unzip -o ./earthquake_detailed.zip
          popd
          sudo apt-get install -y protobuf-compiler

      - uses: docker/metadata-action@v5.7.0
        id: meta
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - uses: docker/setup-buildx-action@v3.10.0

      - uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        uses: docker/build-push-action@v6.16.0
        id: build
        with:
          context: .
          platforms: ${{ matrix.dockerimage }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Export Digest
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - uses: actions/upload-artifact@v4.6.2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          name: digests-${{ matrix.mcarch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker_merge:
    runs-on: ubuntu-24.04
    if: ${{ github.event_name != 'pull_request' }}
    permissions:
      packages: write
      checks: write
      contents: read
      deployments: write

    needs:
      - docker_build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4.3.0
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - uses: docker/setup-buildx-action@v3.10.0

      - uses: docker/metadata-action@v5.7.0
        id: meta
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - uses: docker/login-action@v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
