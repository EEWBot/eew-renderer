// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `quake_prefecture.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:Epicenter)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Epicenter {
    // message fields
    // @@protoc_insertion_point(field:Epicenter.lat_x10)
    pub lat_x10: i32,
    // @@protoc_insertion_point(field:Epicenter.lon_x10)
    pub lon_x10: i32,
    // special fields
    // @@protoc_insertion_point(special_field:Epicenter.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Epicenter {
    fn default() -> &'a Epicenter {
        <Epicenter as ::protobuf::Message>::default_instance()
    }
}

impl Epicenter {
    pub fn new() -> Epicenter {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lat_x10",
            |m: &Epicenter| { &m.lat_x10 },
            |m: &mut Epicenter| { &mut m.lat_x10 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lon_x10",
            |m: &Epicenter| { &m.lon_x10 },
            |m: &mut Epicenter| { &mut m.lon_x10 },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Epicenter>(
            "Epicenter",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Epicenter {
    const NAME: &'static str = "Epicenter";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.lat_x10 = is.read_int32()?;
                },
                16 => {
                    self.lon_x10 = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.lat_x10 != 0 {
            my_size += ::protobuf::rt::int32_size(1, self.lat_x10);
        }
        if self.lon_x10 != 0 {
            my_size += ::protobuf::rt::int32_size(2, self.lon_x10);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.lat_x10 != 0 {
            os.write_int32(1, self.lat_x10)?;
        }
        if self.lon_x10 != 0 {
            os.write_int32(2, self.lon_x10)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Epicenter {
        Epicenter::new()
    }

    fn clear(&mut self) {
        self.lat_x10 = 0;
        self.lon_x10 = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Epicenter {
        static instance: Epicenter = Epicenter {
            lat_x10: 0,
            lon_x10: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Epicenter {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Epicenter").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Epicenter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Epicenter {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:CodeArray)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CodeArray {
    // message fields
    // @@protoc_insertion_point(field:CodeArray.codes)
    pub codes: ::std::vec::Vec<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:CodeArray.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CodeArray {
    fn default() -> &'a CodeArray {
        <CodeArray as ::protobuf::Message>::default_instance()
    }
}

impl CodeArray {
    pub fn new() -> CodeArray {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "codes",
            |m: &CodeArray| { &m.codes },
            |m: &mut CodeArray| { &mut m.codes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CodeArray>(
            "CodeArray",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CodeArray {
    const NAME: &'static str = "CodeArray";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    is.read_repeated_packed_uint32_into(&mut self.codes)?;
                },
                8 => {
                    self.codes.push(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.codes {
            my_size += ::protobuf::rt::uint32_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.codes {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CodeArray {
        CodeArray::new()
    }

    fn clear(&mut self) {
        self.codes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CodeArray {
        static instance: CodeArray = CodeArray {
            codes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CodeArray {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CodeArray").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CodeArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CodeArray {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:QuakePrefectureData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QuakePrefectureData {
    // message fields
    // @@protoc_insertion_point(field:QuakePrefectureData.rendering_width)
    pub rendering_width: u32,
    // @@protoc_insertion_point(field:QuakePrefectureData.quaked_unixtime)
    pub quaked_unixtime: u64,
    // @@protoc_insertion_point(field:QuakePrefectureData.epicenter)
    pub epicenter: ::protobuf::MessageField<Epicenter>,
    // @@protoc_insertion_point(field:QuakePrefectureData.magnitude_x10)
    pub magnitude_x10: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:QuakePrefectureData.code_table_difinition)
    pub code_table_difinition: ::std::string::String,
    // @@protoc_insertion_point(field:QuakePrefectureData.one)
    pub one: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.two)
    pub two: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.three)
    pub three: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.four)
    pub four: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.five_minus)
    pub five_minus: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.five_plus)
    pub five_plus: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.six_minus)
    pub six_minus: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.six_plus)
    pub six_plus: ::protobuf::MessageField<CodeArray>,
    // @@protoc_insertion_point(field:QuakePrefectureData.seven)
    pub seven: ::protobuf::MessageField<CodeArray>,
    // special fields
    // @@protoc_insertion_point(special_field:QuakePrefectureData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QuakePrefectureData {
    fn default() -> &'a QuakePrefectureData {
        <QuakePrefectureData as ::protobuf::Message>::default_instance()
    }
}

impl QuakePrefectureData {
    pub fn new() -> QuakePrefectureData {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(14);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rendering_width",
            |m: &QuakePrefectureData| { &m.rendering_width },
            |m: &mut QuakePrefectureData| { &mut m.rendering_width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quaked_unixtime",
            |m: &QuakePrefectureData| { &m.quaked_unixtime },
            |m: &mut QuakePrefectureData| { &mut m.quaked_unixtime },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Epicenter>(
            "epicenter",
            |m: &QuakePrefectureData| { &m.epicenter },
            |m: &mut QuakePrefectureData| { &mut m.epicenter },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "magnitude_x10",
            |m: &QuakePrefectureData| { &m.magnitude_x10 },
            |m: &mut QuakePrefectureData| { &mut m.magnitude_x10 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code_table_difinition",
            |m: &QuakePrefectureData| { &m.code_table_difinition },
            |m: &mut QuakePrefectureData| { &mut m.code_table_difinition },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "one",
            |m: &QuakePrefectureData| { &m.one },
            |m: &mut QuakePrefectureData| { &mut m.one },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "two",
            |m: &QuakePrefectureData| { &m.two },
            |m: &mut QuakePrefectureData| { &mut m.two },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "three",
            |m: &QuakePrefectureData| { &m.three },
            |m: &mut QuakePrefectureData| { &mut m.three },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "four",
            |m: &QuakePrefectureData| { &m.four },
            |m: &mut QuakePrefectureData| { &mut m.four },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "five_minus",
            |m: &QuakePrefectureData| { &m.five_minus },
            |m: &mut QuakePrefectureData| { &mut m.five_minus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "five_plus",
            |m: &QuakePrefectureData| { &m.five_plus },
            |m: &mut QuakePrefectureData| { &mut m.five_plus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "six_minus",
            |m: &QuakePrefectureData| { &m.six_minus },
            |m: &mut QuakePrefectureData| { &mut m.six_minus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "six_plus",
            |m: &QuakePrefectureData| { &m.six_plus },
            |m: &mut QuakePrefectureData| { &mut m.six_plus },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CodeArray>(
            "seven",
            |m: &QuakePrefectureData| { &m.seven },
            |m: &mut QuakePrefectureData| { &mut m.seven },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QuakePrefectureData>(
            "QuakePrefectureData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QuakePrefectureData {
    const NAME: &'static str = "QuakePrefectureData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.rendering_width = is.read_uint32()?;
                },
                16 => {
                    self.quaked_unixtime = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.epicenter)?;
                },
                32 => {
                    self.magnitude_x10 = ::std::option::Option::Some(is.read_uint32()?);
                },
                42 => {
                    self.code_table_difinition = is.read_string()?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.one)?;
                },
                58 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.two)?;
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.three)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.four)?;
                },
                82 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.five_minus)?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.five_plus)?;
                },
                98 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.six_minus)?;
                },
                106 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.six_plus)?;
                },
                114 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.seven)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.rendering_width != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.rendering_width);
        }
        if self.quaked_unixtime != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.quaked_unixtime);
        }
        if let Some(v) = self.epicenter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.magnitude_x10 {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if !self.code_table_difinition.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.code_table_difinition);
        }
        if let Some(v) = self.one.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.two.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.three.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.four.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.five_minus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.five_plus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.six_minus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.six_plus.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.seven.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.rendering_width != 0 {
            os.write_uint32(1, self.rendering_width)?;
        }
        if self.quaked_unixtime != 0 {
            os.write_uint64(2, self.quaked_unixtime)?;
        }
        if let Some(v) = self.epicenter.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.magnitude_x10 {
            os.write_uint32(4, v)?;
        }
        if !self.code_table_difinition.is_empty() {
            os.write_string(5, &self.code_table_difinition)?;
        }
        if let Some(v) = self.one.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        }
        if let Some(v) = self.two.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
        }
        if let Some(v) = self.three.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.four.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if let Some(v) = self.five_minus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        }
        if let Some(v) = self.five_plus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        if let Some(v) = self.six_minus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        }
        if let Some(v) = self.six_plus.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        }
        if let Some(v) = self.seven.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QuakePrefectureData {
        QuakePrefectureData::new()
    }

    fn clear(&mut self) {
        self.rendering_width = 0;
        self.quaked_unixtime = 0;
        self.epicenter.clear();
        self.magnitude_x10 = ::std::option::Option::None;
        self.code_table_difinition.clear();
        self.one.clear();
        self.two.clear();
        self.three.clear();
        self.four.clear();
        self.five_minus.clear();
        self.five_plus.clear();
        self.six_minus.clear();
        self.six_plus.clear();
        self.seven.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QuakePrefectureData {
        static instance: QuakePrefectureData = QuakePrefectureData {
            rendering_width: 0,
            quaked_unixtime: 0,
            epicenter: ::protobuf::MessageField::none(),
            magnitude_x10: ::std::option::Option::None,
            code_table_difinition: ::std::string::String::new(),
            one: ::protobuf::MessageField::none(),
            two: ::protobuf::MessageField::none(),
            three: ::protobuf::MessageField::none(),
            four: ::protobuf::MessageField::none(),
            five_minus: ::protobuf::MessageField::none(),
            five_plus: ::protobuf::MessageField::none(),
            six_minus: ::protobuf::MessageField::none(),
            six_plus: ::protobuf::MessageField::none(),
            seven: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QuakePrefectureData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QuakePrefectureData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QuakePrefectureData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuakePrefectureData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16quake_prefecture.proto\"=\n\tEpicenter\x12\x17\n\x07lat_x10\x18\
    \x01\x20\x01(\x05R\x06latX10\x12\x17\n\x07lon_x10\x18\x02\x20\x01(\x05R\
    \x06lonX10\"!\n\tCodeArray\x12\x14\n\x05codes\x18\x01\x20\x03(\rR\x05cod\
    es\"\xd8\x04\n\x13QuakePrefectureData\x12'\n\x0frendering_width\x18\x01\
    \x20\x01(\rR\x0erenderingWidth\x12'\n\x0fquaked_unixtime\x18\x02\x20\x01\
    (\x04R\x0equakedUnixtime\x12-\n\tepicenter\x18\x03\x20\x01(\x0b2\n.Epice\
    nterH\0R\tepicenter\x88\x01\x01\x12(\n\rmagnitude_x10\x18\x04\x20\x01(\r\
    H\x01R\x0cmagnitudeX10\x88\x01\x01\x122\n\x15code_table_difinition\x18\
    \x05\x20\x01(\tR\x13codeTableDifinition\x12\x1c\n\x03one\x18\x06\x20\x01\
    (\x0b2\n.CodeArrayR\x03one\x12\x1c\n\x03two\x18\x07\x20\x01(\x0b2\n.Code\
    ArrayR\x03two\x12\x20\n\x05three\x18\x08\x20\x01(\x0b2\n.CodeArrayR\x05t\
    hree\x12\x1e\n\x04four\x18\t\x20\x01(\x0b2\n.CodeArrayR\x04four\x12)\n\n\
    five_minus\x18\n\x20\x01(\x0b2\n.CodeArrayR\tfiveMinus\x12'\n\tfive_plus\
    \x18\x0b\x20\x01(\x0b2\n.CodeArrayR\x08fivePlus\x12'\n\tsix_minus\x18\
    \x0c\x20\x01(\x0b2\n.CodeArrayR\x08sixMinus\x12%\n\x08six_plus\x18\r\x20\
    \x01(\x0b2\n.CodeArrayR\x07sixPlus\x12\x20\n\x05seven\x18\x0e\x20\x01(\
    \x0b2\n.CodeArrayR\x05sevenB\x0c\n\n_epicenterB\x10\n\x0e_magnitude_x10b\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Epicenter::generated_message_descriptor_data());
            messages.push(CodeArray::generated_message_descriptor_data());
            messages.push(QuakePrefectureData::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
